<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.tjetc.dao.MemberMapper">
  <resultMap id="BaseResultMap" type="com.tjetc.entity.Member">
    <id column="member_id" jdbcType="BIGINT" property="memberId"/>
    <result column="member_name" jdbcType="VARCHAR" property="memberName"/>
    <result column="password" jdbcType="VARCHAR" property="password"/>
    <result column="username" jdbcType="VARCHAR" property="username"/>
    <result column="join_time" jdbcType="TIMESTAMP" property="joinTime"/>
    <result column="create_time" jdbcType="TIMESTAMP" property="createTime"/>
    <result column="update_time" jdbcType="TIMESTAMP" property="updateTime"/>
    <result column="root" jdbcType="INTEGER" property="root"/>
  </resultMap>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Long">
    delete from member
    where member_id = #{memberId,jdbcType=BIGINT}
  </delete>
  <insert id="insert" parameterType="com.tjetc.entity.Member">
    insert into member (member_id, member_name, password,
      username, join_time, create_time,
      update_time, root)
    values (#{memberId,jdbcType=BIGINT}, #{memberName,jdbcType=VARCHAR}, #{password,jdbcType=VARCHAR},
      #{username,jdbcType=VARCHAR}, #{joinTime,jdbcType=TIMESTAMP}, #{createTime,jdbcType=TIMESTAMP},
      #{updateTime,jdbcType=TIMESTAMP}, #{root,jdbcType=INTEGER})
  </insert>
  <update id="updateByPrimaryKey" parameterType="com.tjetc.entity.Member">
    update member
    set member_name = #{memberName,jdbcType=VARCHAR},
      password = #{password,jdbcType=VARCHAR},
      username = #{username,jdbcType=VARCHAR},
      join_time = #{joinTime,jdbcType=TIMESTAMP},
      create_time = #{createTime,jdbcType=TIMESTAMP},
      update_time = #{updateTime,jdbcType=TIMESTAMP},
      root = #{root,jdbcType=INTEGER}
    where member_id = #{memberId,jdbcType=BIGINT}
  </update>
  <select id="selectAll" resultMap="BaseResultMap">
    select member_id, member_name, password, username, join_time, create_time, update_time,
    root
    from member
  </select>

  <select id="selectByUsername" resultMap="BaseResultMap">
        select member_id,member_name,username,password,create_time,update_time,root from member where username=#{username}
    </select>

  <select id="selectVoByUsername" resultMap="MemberPermissionVoResultMap">
        select DISTINCT a.member_id,a.username,a.root,p.permission_name
        from member a
        left JOIN member_role ar on a.member_id = ar.member_id
        LEFT JOIN role_permission rp on ar.role_id = rp.role_id
        left join permission p on rp.permission_id = p.permission_id
        where a.username = #{username}
    </select>
  <resultMap id="MemberPermissionVoResultMap" type="memberPermissionVo">
    <id column="id" property="memberId"></id>
    <result column="username" property="memberUsername"></result>
    <result column="root" property="memberRoot"></result>
    <collection property="permissionNames" ofType="string">
      <result column="permission_name"></result>
    </collection>
  </resultMap>

  <!--查看编辑-->
  <select id="selectEdit" resultType="String">
    select member_name from member where member_id=any(
        select member_id from member_role where role_id=4)
  </select>

  <!--查看播音-->
  <select id="selectBroadcast" resultType="String">
    select member_name from member where member_id=any(
        select member_id from member_role where role_id=3)
  </select>



</mapper>







































